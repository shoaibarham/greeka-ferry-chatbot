import sqlite3
import json

# Function to create tables in the SQLite database
def create_tables(cursor):
    """
    Create the necessary tables in the SQLite database if they do not already exist.
    """
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS routes (
            route_id INTEGER PRIMARY KEY AUTOINCREMENT,
            route_number TEXT,
            company TEXT,
            company_code TEXT,
            origin_port_code TEXT,
            origin_port_name TEXT,
            destination_port_code TEXT,
            destination_port_name TEXT,
            departure_time TEXT,
            arrival_time TEXT,
            origin_port_stop INTEGER,
            destination_port_stop INTEGER,
            departure_offset INTEGER,
            arrival_offset INTEGER,
            duration INTEGER
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS dates_and_vessels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            route_id INTEGER,
            schedule_date TEXT,
            vessel TEXT,
            FOREIGN KEY (route_id) REFERENCES routes(route_id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS vessels_and_indicative_prices (
            route_id INTEGER,
            vessel TEXT,
            indicative_price INTEGER,
            PRIMARY KEY (route_id, vessel),
            FOREIGN KEY (route_id) REFERENCES routes(route_id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS vessels_and_accommodation_prices (
            route_id INTEGER,
            vessel TEXT,
            accommodation_type TEXT,
            price INTEGER,
            PRIMARY KEY (route_id, vessel, accommodation_type),
            FOREIGN KEY (route_id) REFERENCES routes(route_id)
        )
    ''')

# Function to clean text values
def clean_text(value, to_upper=True):
    """
    Clean text values by trimming spaces, ensuring it's a string or None, 
    and optionally converting to uppercase.
    """
    if isinstance(value, str):
        value = value.strip()
        return value.upper() if to_upper else value
    return value

# Function to insert data into the database
def insert_data(cursor, data):
    """
    Insert data into the database tables from the provided JSON data.
    """
    for item in data:
        # Insert into the routes table
        cursor.execute('''
            INSERT INTO routes (
                route_number, company, company_code, origin_port_name, origin_port_code, 
                destination_port_name, destination_port_code, departure_time, arrival_time, 
                origin_port_stop, destination_port_stop, departure_offset, arrival_offset, duration
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            clean_text(item.get('route_id')),  # Route number
            clean_text(item.get('company')),  # Company name
            clean_text(item.get('company_code')),  # Company code
            clean_text(item.get('origin_port')),  # Origin port name
            clean_text(item.get('origin_port_code')),  # Origin port code
            clean_text(item.get('destination_port')),  # Destination port name
            clean_text(item.get('destination_port_code')),  # Destination port code
            clean_text(item.get('departure_time'), to_upper=False),  # Times should remain unchanged
            clean_text(item.get('arrival_time'), to_upper=False),
            item.get('origin_port_stop'),
            item.get('destination_port_stop'),
            item.get('departure_offset'),
            item.get('arrival_offset'),
            item.get('duration')
        ))

        # Get the auto-generated ID for this route
        route_db_id = cursor.lastrowid

        # Insert into the dates_and_vessels table
        for schedule_date, vessel in item.get('dates_and_vessels', {}).items():
            cursor.execute('''
                INSERT INTO dates_and_vessels (route_id, schedule_date, vessel)
                VALUES (?, ?, ?)
            ''', (route_db_id, clean_text(schedule_date, to_upper=False), clean_text(vessel)))

        # Insert into the vessels_and_indicative_prices table
        for vessel, indicative_price in item.get('vessels_and_indicative_prices', {}).items():
            cursor.execute('''
                INSERT INTO vessels_and_indicative_prices (route_id, vessel, indicative_price)
                VALUES (?, ?, ?)
            ''', (route_db_id, clean_text(vessel), indicative_price))

        # Insert into the vessels_and_accommodation_prices table
        for vessel, accommodations in item.get('vessels_and_accommodation_prices', {}).items():
            for accommodation_type, price in accommodations.items():
                cursor.execute('''
                    INSERT INTO vessels_and_accommodation_prices (route_id, vessel, accommodation_type, price)
                    VALUES (?, ?, ?, ?)
                ''', (route_db_id, clean_text(vessel), clean_text(accommodation_type), price))

# Main function to load data into the database
def main():
    """
    Main function to load data from a JSON file into the SQLite database.
    """
    # Connect to (or create) the SQLite database
    conn = sqlite3.connect('gtfs.db')
    cursor = conn.cursor()

    # Create tables
    create_tables(cursor)

    # Load JSON data from file
    with open('GTFS_data_v5.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    # Insert data into the database
    insert_data(cursor, data)

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    print("Data loaded successfully into the database.")

# Run the main function
if __name__ == "__main__":
    main()

def run_sql_query(self, query: str, use_historical_db: bool = False) -> str:
    """
    Execute an SQL query against the appropriate database.
    
    :param query: SQL query to execute
    :param use_historical_db: Whether to use the historical database
    :return: Query results or error message
    """
    db_path = self.historical_db_path if use_historical_db else self.db_path
    
    try:
        print(f"Executing query on {'historical' if use_historical_db else 'main'} database: {query}")
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute(query)
        columns = [description[0] for description in cursor.description]
        rows = cursor.fetchall()
                
        conn.close()
        
        if not rows:
            return "No results found."
        
        result_str = "Columns: " + ", ".join(columns) + "\n"
        result_str += "\n".join([str(row) for row in rows])
        
        print(f"Result: {result_str}")
        return result_str
    
    except sqlite3.Error as e:
        return f"Database error: {e}"
    except Exception as e:
        return f"Unexpected error executing query: {e}"
